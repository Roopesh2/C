var j = j || {}; j.S = {}; j.I = function (g) { var c = 0; return function () { return c < g.length ? { done: !1, value: g[c++] } : { done: !0 } } }; j.A = function (g) { return { next: j.I(g) } }; j.M = function (g) { var c = "undefined" != typeof Symbol && Symbol.iterator && g[Symbol.iterator]; return c ? c.call(g) : j.A(g) };
(function () {
  function g(c) { for (var d = j.M(Object.keys(c)), e = d.next(); !e.done; e = d.next())e = e.value, window[e] = c[e] } (function () {
    var c = {
      DARK_BLUE: "#236B8E", DARK_BROWN: "#8B4513", LIGHT_BROWN: "#CD853F", BLUE_A: "#C7E9F1", BLUE_B: "#9CDCEB", BLUE_C: "#58C4DD", BLUE_D: "#29ABCA", BLUE_E: "#1C758A", TEAL_A: "#ACEAD7", TEAL_B: "#76DDC0", TEAL_C: "#5CD0B3", TEAL_D: "#55C1A7", TEAL_E: "#49A88F", GREEN_A: "#C9E2AE", GREEN_B: "#A6CF8C", GREEN_C: "#83C167", GREEN_D: "#77B05D", GREEN_E: "#699C52", YELLOW_A: "#FFF1B6", YELLOW_B: "#FFEA94",
      YELLOW_C: "#FFFF00", YELLOW_D: "#F4D345", YELLOW_E: "#E8C11C", GOLD_A: "#F7C797", GOLD_B: "#F9B775", GOLD_C: "#F0AC5F", GOLD_D: "#E1A158", GOLD_E: "#C78D46", RED_A: "#F7A1A3", RED_B: "#FF8080", RED_C: "#FC6255", RED_D: "#E65A4C", RED_E: "#CF5044", MAROON_A: "#ECABC1", MAROON_B: "#EC92AB", MAROON_C: "#C55F73", MAROON_D: "#A24D61", MAROON_E: "#94424F", PURPLE_A: "#CAA3E8", PURPLE_B: "#B189C6", PURPLE_C: "#9A72AC", PURPLE_D: "#715582", PURPLE_E: "#644172", WHITE: "#FFFFFF", BLACK: "#000000", LIGHT_GRAY: "#BBBBBB", LIGHT_GREY: "#BBBBBB", GRAY: "#888888",
      GREY: "#888888", DARK_GREY: "#444444", DARK_GRAY: "#444444", DARKER_GREY: "#222222", DARKER_GRAY: "#222222", GREY_BROWN: "#736357", PINK: "#D147BD", LIGHT_PINK: "#DC75CD", GREEN_SCREEN: "#00FF00", ORANGE: "#FF862F", NONE: "transparent"
    }; window.COLOR_LIST = c; for (var d = j.M(Object.keys(c)), e = d.next(); !e.done; e = d.next())e = e.value, window[e] = c[e]; window.C_Extensions = {}
  })(); g({
    E: Math.E, LN2: Math.LN2, LN10: Math.LN10, PI: Math.PI, SQRT2: Math.SQRT2, abs: Math.abs, acos: Math.acos, asin: Math.asin, atan: Math.atan, atan2: Math.atan2,
    cbrt: Math.cbrt, ceil: Math.ceil, cos: Math.cos, cosh: Math.cosh, exp: Math.exp, floor: Math.floor, log: Math.log, log2: Math.log2, log10: Math.log10, max: Math.max, min: Math.min, pow: Math.pow, rand: Math.random, round: Math.round, sgn: Math.sign, sin: Math.sin, sqrt: Math.sqrt, tan: Math.tan, tanh: Math.tanh, dist: function (c, d) { if (c instanceof Array && d instanceof Array) return sqrt(Math.pow(c[0] - d[0], 2) + Math.pow(c[1] - d[1], 2)) }
  }); (function () {
    g({
      "int": function (c, d) { return isNaN(c) ? d : c }, bool: function (c, d) { return void 0 == c ? d : c }, getWidth: function () {
        var c =
          window.getComputedStyle(document.body); return window.innerWidth - 2 * parseInt(c.marginLeft)
      }, addCExtension: function (c) { window.C_Extensions = Object.assign(window.C_Extensions, c) }
    })
  })(); (function () {
    var c = function (d, e, h) {
      var b = d.getContext("2d"), k = window.devicePixelRatio; return Object.assign({
        cvs: d, ctx: b, W: e, H: h, line: function (a, f, p, l) { b.beginPath(); b.moveTo(a, f); b.lineTo(p, l); b.stroke(); b.closePath() }, background: function (a) { b.save(); this.rest(); b.fillStyle = a; b.fillRect(-W, -H, 2 * W, 2 * H); b.restore() },
        translate: function (a, f) { b.translate(a, void 0 === f ? a : f) }, rest: function () { b.resetTransform(); b.scale(k, k) }, stroke: function (a) { this.ctx.strokeStyle = a }, fill: function (a) { this.ctx.fillStyle = a }, strokeWidth: function (a) { this.ctx.lineWidth = Number(a) }, getDrawConfigs: function () { return { stroke: b.strokeStyle, fill: b.fillStyle, strokeWidth: b.lineWidth } }, arc: function (a) { b.beginPath(); b.arc(a.p[0], a.p[1], a.r, a.sa || 0, int(a.ea, 2 * Math.PI)); bool(a.fill, !1) && b.fill(); bool(a.stroke, !0) && b.stroke(); b.closePath() }, circle: function (a) {
          this.arc({
            p: a.p,
            r: a.r, sa: 0, ea: 2 * Math.PI, fill: a.fill, stroke: a.stroke
          })
        }, loop: function (a, f) { this.recentAnimation = setInterval(a.bind(this), f) }, noLoop: function (a) { a = void 0 === a ? function () { } : a; this.recentAnimation && clearInterval(this.recentAnimation); this.recentAnimation = null; b.animating = !1; a.bind(this)() }, getFPS: function () { }, drawPlayBtn: function (a) {
          a = void 0 === a ? {} : a; b.save(); this.rest(); var f = a.p || [this.W / 2, this.H / 2]; this.translate(f[0], f[1]); this.fill(a.background || "#3fffac"); this.arc({
            p: [0, 0], r: a.r || 20, fill: !0,
            stroke: !1
          }); f = a.playLen || 11; b.beginPath(); b.moveTo(f, 0); this.fill(a.playCol || "#fff"); for (a = 1; 3 > a; a++)b.lineTo(Math.cos(a * Math.PI * 2 / 3) * f, Math.sin(a * Math.PI * 2 / 3) * f); b.fill(); b.closePath()
        }
      }, window.C_Extensions)
    }; window.C = function (d, e, h) {
      h = void 0 === h ? {} : h; var b = h.aspectRatio || [16, 9], k = int(h.width, getWidth()), a = int(h.height, k / b[0] * b[1]); b = bool(h.autoPlay, !0); var f = h.thumbnail || function () { n.drawPlayBtn() }, p = devicePixelRatio, l = function () {
        var m = document.createElement("canvas"); m.width = p * k; m.height = p * a;
        m.style.width = k + "px"; m.style.height = a + "px"; m.style.position = "relative"; return m
      }(), q = l.getContext("2d"); bool(h.replaceCurrent, !0) && (d.innerHTML = ""); d.appendChild(l); var n = c(l, k, a), r = e.bind(n); n.rest(); b ? r() : (l.onclick = function () { q.animating || (n.rest(), q.clearRect(0, 0, k, a), r(), q.animating = !0) }, f.bind(n)())
    }
  })()
})();